diff --git a/compiler/basicTypes/Module.hs b/compiler/basicTypes/Module.hs
index e46d4a55b1..05838c771e 100644
--- a/compiler/basicTypes/Module.hs
+++ b/compiler/basicTypes/Module.hs
@@ -15,7 +15,8 @@ the keys.
 module Module
     (
         -- * The ModuleName type
-        ModuleName,
+        ModuleName (..),
+        MyType (..),
         pprModuleName,
         moduleNameFS,
         moduleNameString,
@@ -245,6 +246,11 @@ import {-# SOURCE #-} Packages (componentIdString, improveUnitId, PackageConfigM
 -- (For a brief, non-released period of time, we also called these
 -- UnitKeys).
 
+data MyType = MyValue deriving (Show, Eq)
+
+instance Outputable MyType where
+   ppr = text . show
+
 {-
 ************************************************************************
 *                                                                      *
@@ -324,7 +330,7 @@ addBootSuffixLocnOut locn
 -}
 
 -- | A ModuleName is essentially a simple string, e.g. @Data.List@.
-newtype ModuleName = ModuleName FastString
+newtype ModuleName = ModuleName FastString deriving (Show)
 
 instance Uniquable ModuleName where
   getUnique (ModuleName nm) = getUnique nm
@@ -416,7 +422,7 @@ data Module = Module {
    moduleUnitId :: !UnitId,  -- pkg-1.0
    moduleName :: !ModuleName  -- A.B.C
   }
-  deriving (Eq, Ord)
+  deriving (Eq, Ord, Show)
 
 -- | Calculate the free holes of a 'Module'.  If this set is non-empty,
 -- this module was defined in an indefinite library that had required
@@ -515,7 +521,7 @@ instance DbUnitIdModuleRep InstalledUnitId ComponentId UnitId ModuleName Module
 -- multiple components and a 'ComponentId' uniquely identifies a component
 -- within a package.  When a package only has one component, the 'ComponentId'
 -- coincides with the 'InstalledPackageId'
-newtype ComponentId        = ComponentId        FastString deriving (Eq, Ord)
+newtype ComponentId        = ComponentId        FastString deriving (Eq, Ord, Show)
 
 instance BinaryStringRep ComponentId where
   fromStringRep = ComponentId . mkFastStringByteString
@@ -557,6 +563,7 @@ data UnitId
     = IndefiniteUnitId {-# UNPACK #-} !IndefUnitId
     |   DefiniteUnitId {-# UNPACK #-} !DefUnitId
 
+
 unitIdFS :: UnitId -> FastString
 unitIdFS (IndefiniteUnitId x) = indefUnitIdFS x
 unitIdFS (DefiniteUnitId (DefUnitId x)) = installedUnitIdFS x
@@ -595,6 +602,12 @@ data IndefUnitId
         indefUnitIdFreeHoles :: UniqDSet ModuleName
     }
 
+instance Show IndefUnitId where
+  show x = "IndefUnitId { indefUnitIdFS = " ++ show (indefUnitIdFS x)
+             ++ ", indefUnitIdComponentId = " ++ show (indefUnitIdComponentId x)
+             ++ ", indefUnitIdInsts = " ++ show (indefUnitIdInsts x)
+             ++ " }"
+
 instance Eq IndefUnitId where
   u1 == u2 = indefUnitIdKey u1 == indefUnitIdKey u2
 
@@ -648,7 +661,7 @@ indefUnitIdToUnitId dflags iuid =
 data IndefModule = IndefModule {
         indefModuleUnitId :: IndefUnitId,
         indefModuleName   :: ModuleName
-    } deriving (Eq, Ord)
+    } deriving (Eq, Ord, Show)
 
 instance Outputable IndefModule where
   ppr (IndefModule uid m) =
@@ -675,7 +688,7 @@ newtype InstalledUnitId =
       -- | The full hashed unit identifier, including the component id
       -- and the hash.
       installedUnitIdFS :: FastString
-    }
+    } deriving (Show)
 
 instance Binary InstalledUnitId where
   put_ bh (InstalledUnitId fs) = put_ bh fs
@@ -735,7 +748,7 @@ data InstalledModule = InstalledModule {
    installedModuleUnitId :: !InstalledUnitId,
    installedModuleName :: !ModuleName
   }
-  deriving (Eq, Ord)
+  deriving (Eq, Ord, Show)
 
 instance Outputable InstalledModule where
   ppr (InstalledModule p n) =
@@ -766,7 +779,7 @@ installedUnitIdEq iuid uid =
 -- it only refers to a definite library; i.e., one we have generated
 -- code for.
 newtype DefUnitId = DefUnitId { unDefUnitId :: InstalledUnitId }
-    deriving (Eq, Ord)
+    deriving (Eq, Ord, Show)
 
 instance Outputable DefUnitId where
     ppr (DefUnitId uid) = ppr uid
diff --git a/compiler/main/DynFlags.hs b/compiler/main/DynFlags.hs
index 2ea0b3d5e9..96032e20b9 100644
--- a/compiler/main/DynFlags.hs
+++ b/compiler/main/DynFlags.hs
@@ -1629,7 +1629,7 @@ data ModRenaming = ModRenaming {
     modRenamingWithImplicit :: Bool, -- ^ Bring all exposed modules into scope?
     modRenamings :: [(ModuleName, ModuleName)] -- ^ Bring module @m@ into scope
                                                --   under name @n@.
-  } deriving (Eq)
+  } deriving (Eq, Show)
 instance Outputable ModRenaming where
     ppr (ModRenaming b rns) = ppr b <+> parens (ppr rns)
 
@@ -1647,14 +1647,14 @@ data TrustFlag
 data PackageFlag
   = ExposePackage   String PackageArg ModRenaming -- ^ @-package@, @-package-id@
   | HidePackage     String -- ^ @-hide-package@
-  deriving (Eq) -- NB: equality instance is used by packageFlagsChanged
+  deriving (Eq, Show) -- NB: equality instance is used by packageFlagsChanged
 
 data PackageDBFlag
   = PackageDB PkgConfRef
   | NoUserPackageDB
   | NoGlobalPackageDB
   | ClearPackageDBs
-  deriving (Eq)
+  deriving (Eq, Show)
 
 packageFlagsChanged :: DynFlags -> DynFlags -> Bool
 packageFlagsChanged idflags1 idflags0 =
@@ -5245,7 +5245,7 @@ data PkgConfRef
   = GlobalPkgConf
   | UserPkgConf
   | PkgConfFile FilePath
-  deriving Eq
+  deriving (Eq, Show)
 
 addPkgConfRef :: PkgConfRef -> DynP ()
 addPkgConfRef p = upd $ \s ->
diff --git a/compiler/main/PackageConfig.hs b/compiler/main/PackageConfig.hs
index 7d096895b4..6803c5272f 100644
--- a/compiler/main/PackageConfig.hs
+++ b/compiler/main/PackageConfig.hs
@@ -57,8 +57,8 @@ type PackageConfig = InstalledPackageInfo
 --       feature, but ghc doesn't currently have convenient support for any
 --       other compact string types, e.g. plain ByteString or Text.
 
-newtype SourcePackageId    = SourcePackageId    FastString deriving (Eq, Ord)
-newtype PackageName        = PackageName        FastString deriving (Eq, Ord)
+newtype SourcePackageId    = SourcePackageId    FastString deriving (Eq, Ord, Show)
+newtype PackageName        = PackageName        FastString deriving (Eq, Ord, Show)
 
 instance BinaryStringRep SourcePackageId where
   fromStringRep = SourcePackageId . mkFastStringByteString
diff --git a/compiler/main/Packages.hs b/compiler/main/Packages.hs
index f5a8c964b3..78507c6274 100644
--- a/compiler/main/Packages.hs
+++ b/compiler/main/Packages.hs
@@ -1,6 +1,6 @@
 -- (c) The University of Glasgow, 2006
 
-{-# LANGUAGE CPP, ScopedTypeVariables, BangPatterns, FlexibleContexts #-}
+{-# LANGUAGE CPP, ScopedTypeVariables, BangPatterns, FlexibleContexts, StandaloneDeriving #-}
 
 -- | Package manipulation
 module Packages (
@@ -476,7 +476,9 @@ initPackages dflags0 = withTiming dflags0
   pkg_db <-
     case pkgDatabase dflags of
         Nothing -> readPackageConfigs dflags
-        Just db -> return $ map (\(p, pkgs)
+        Just db -> do
+          dbgTraceS dflags $ "Use Package DB from dynflags " ++ show db
+          return $ map (\(p, pkgs)
                                     -> (p, setBatchPackageFlags dflags pkgs)) db
   (pkg_state, preload, insts)
         <- mkPackageState dflags pkg_db []
@@ -493,15 +495,20 @@ initPackages dflags0 = withTiming dflags0
 readPackageConfigs :: DynFlags -> IO [(FilePath, [PackageConfig])]
 readPackageConfigs dflags = do
   conf_refs <- getPackageConfRefs dflags
+  dbgTraceS dflags $ "DynFlags.pkgDatabase is Nothing => read packages from: "
+                        ++ show conf_refs
   confs     <- liftM catMaybes $ mapM (resolvePackageConfig dflags) conf_refs
+  dbgTraceS dflags $ "Read packages configurations from: " ++ show confs
   mapM (readPackageConfig dflags) confs
 
 
+
 getPackageConfRefs :: DynFlags -> IO [PkgConfRef]
 getPackageConfRefs dflags = do
   let system_conf_refs = [UserPkgConf, GlobalPkgConf]
 
   e_pkg_path <- tryIO (getEnv $ map toUpper (programName dflags) ++ "_PACKAGE_PATH")
+  dbgTraceS dflags ("_PACKAGE_PATH = " ++ show e_pkg_path)
   let base_conf_refs = case e_pkg_path of
         Left _ -> system_conf_refs
         Right path
@@ -583,7 +590,11 @@ readPackageConfig dflags conf_file = do
         then do
           debugTraceMsg dflags 2 $ text "Using binary package database:"
                                     <+> text filename
-          readPackageDbForGhc filename
+          rawPkgConfig <- readPackageDbForGhc filename
+          dbgTraceS dflags $ "From file " ++ show filename
+                                   ++ "; Raw Package Config: "
+                                   ++ show rawPkgConfig
+          pure rawPkgConfig
         else do
           -- If there is no package.cache file, we check if the database is not
           -- empty by inspecting if the directory contains any .conf file. If it
@@ -734,6 +745,11 @@ applyTrustFlag dflags prec_map unusable pkgs flag =
 isIndefinite :: DynFlags -> Bool
 isIndefinite dflags = not (unitIdIsDefinite (thisPackage dflags))
 
+
+dbgTraceS :: DynFlags -> String -> IO ()
+dbgTraceS dflags s = debugTraceMsg dflags 3 $ text s
+
+
 applyPackageFlag
    :: DynFlags
    -> PackagePrecedenceIndex
@@ -746,7 +762,8 @@ applyPackageFlag
    -> PackageFlag               -- flag to apply
    -> IO VisibilityMap        -- Now exposed
 
-applyPackageFlag dflags prec_map pkg_db unusable no_hide_others pkgs vm flag =
+applyPackageFlag dflags prec_map pkg_db unusable no_hide_others pkgs vm flag = do
+  dbgTraceS dflags $ "applyPackageFlag: st = -" ++ " flag = " ++ show flag
   case flag of
     ExposePackage _ arg (ModRenaming b rns) ->
        case findPackages prec_map pkg_db arg pkgs unusable of
@@ -1154,6 +1171,7 @@ data UnusablePackageReason
     -- | This package transitively depends on a package which was
     -- shadowed by an ABI-incompatible package.
   | ShadowedDependencies [InstalledUnitId]
+    deriving (Show)
 
 instance Outputable UnusablePackageReason where
     ppr IgnoredWithFlag = text "[ignored with flag]"
@@ -1328,9 +1346,16 @@ mergeDatabases dflags = foldM merge (Map.empty, Map.empty) . zip [1..]
 -- 4. Remove all packages which have deps with mismatching ABIs
 --
 validateDatabase :: DynFlags -> InstalledPackageIndex
-                 -> (InstalledPackageIndex, UnusablePackages, [SCC PackageConfig])
-validateDatabase dflags pkg_map1 =
-    (pkg_map5, unusable, sccs)
+                 -> IO (InstalledPackageIndex, UnusablePackages, [SCC PackageConfig])
+validateDatabase dflags pkg_map1 = do
+    let unusable = foldl Map.union mempty
+                     [ directly_ignored
+                     , unusable_ignored
+                     , unusable_broken
+                     , unusable_cyclic
+                     , unusable_shadowed ]
+    dbgTraceS dflags $ "Directly broken packages: " ++ show directly_ignored
+    pure (pkg_map5, unusable, sccs)
   where
     ignore_flags = reverse (ignorePackageFlags dflags)
 
@@ -1368,10 +1393,6 @@ validateDatabase dflags pkg_map1 =
     (pkg_map5, shadowed) = removePackages (map unitId directly_shadowed) index pkg_map4
     unusable_shadowed = mk_unusable ShadowedDependencies depsAbiMismatch pkg_map5 shadowed
 
-    unusable = directly_ignored `Map.union` unusable_ignored
-                                `Map.union` unusable_broken
-                                `Map.union` unusable_cyclic
-                                `Map.union` unusable_shadowed
 
 -- -----------------------------------------------------------------------------
 -- When all the command-line options are in, we can process our package
@@ -1453,7 +1474,7 @@ mkPackageState dflags dbs preload0 = do
 
   -- Now that we've merged everything together, prune out unusable
   -- packages.
-  let (pkg_map2, unusable, sccs) = validateDatabase dflags pkg_map1
+  (pkg_map2, unusable, sccs) <- validateDatabase dflags pkg_map1
 
   reportCycles dflags sccs
   reportUnusable dflags unusable
@@ -1462,6 +1483,7 @@ mkPackageState dflags dbs preload0 = do
   -- or not packages are visible or not)
   pkgs1 <- foldM (applyTrustFlag dflags prec_map unusable)
                  (Map.elems pkg_map2) (reverse (trustFlags dflags))
+  dbgTraceS dflags $ ("mkPackageState, pkgs1: " ++ show pkgs1)
   let prelim_pkg_db = extendPackageConfigMap emptyPackageConfigMap pkgs1
 
   --
@@ -1528,6 +1550,7 @@ mkPackageState dflags dbs preload0 = do
   -- package arguments we need to key against the old versions.
   --
   (pkgs2, wired_map) <- findWiredInPackages dflags prec_map pkgs1 vis_map2
+  dbgTraceS dflags $ ("mkPackageState, pkgs2: " ++ show pkgs2)
   let pkg_db = extendPackageConfigMap emptyPackageConfigMap pkgs2
 
   -- Update the visibility map, so we treat wired packages as visible.
@@ -1545,6 +1568,7 @@ mkPackageState dflags dbs preload0 = do
                         -- because otherwise applyPackageFlag
                         -- won't work.
                         | otherwise = vis_map2
+
                 plugin_vis_map2
                     <- foldM (applyPackageFlag dflags prec_map prelim_pkg_db unusable
                                 (gopt Opt_HideAllPluginPackages dflags) pkgs1)
